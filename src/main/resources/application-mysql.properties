# database init, supports mysql too
#database=mysql
#spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost/petclinic}
#spring.datasource.username=${MYSQL_USER:petclinic}
#spring.datasource.password=${MYSQL_PASS:petclinic}
# SQL is written to be idempotent so this is safe
#spring.datasource.initialization-mode=always

# Convert to GCP Cloud SQL Mysql
database=mysql
spring.cloud.gcp.sql.enabled=true
spring.cloud.gcp.project-id=${PROJECT_ID:petclinic}
#spring.cloud.gcp.credentials.location=file:/path/to/service-account.json
spring.cloud.gcp.sql.credentials.encoded-key=${MYSQL_SA_KEY:encrypt-key}
spring.cloud.gcp.sql.instance-connection-name=${MYSQL_CONN:prj-xxx-d-xxx-xxx-xxxx:us-central1:xxxxxxxx}
spring.cloud.gcp.sql.database-name=${MYSQL_DB:petclinic}
#spring.datasource.username=${MYSQL_USER:petclinic}
#spring.datasource.password=${MYSQL_PASS:petclinic}

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Initialize the database since the newly created Cloud SQL database has no tables. The following flag is for Spring Boot 2.
spring.datasource.initialization-mode=always
